"""
Python script for extracting body areas and specific body sites of imaging medical documents
"""

__name__ = "body_area"
__author__ = "Gal Peled"

from openpyxl import load_workbook
from imaging_type import *
import itertools

# path = 'pandas_to_excel.xlsx'


def write_to_xlsx(path, data, row, column, sheet_index):
    wb = load_workbook(path)
    sheets = wb.sheetnames
    dr_note = wb[sheets[sheet_index]]
    # Then update as you want it
    dr_note.cell(row=row, column=column).value = data  # This will change the cell(2,4) to 4
    wb.save("NEW EXCEL SAMPLE.xlsx")


def body_area_line(filename, area):
    """
    Finds and returns the line index where the body area appears in the imaging document txt file.
    Does it by iterating over the lines in the file and finding where area is.

    Parameters
    ----------
    filename : str
        A string representing the name of the txt file generated by OCR process on an imaging document
    typ : str
        A string representing one body area

    Returns
    -------
    int
        Index of area in the txt file

    """
    # open the sample text representing the imaging doc
    doc = open(filename)

    # read the content of the file opened
    content = doc.readlines()

    # pre-processing for deleting empty lines generated by OCR, could be in another function
    fixed_content = [x.replace('\n', '') for x in content if x != '\n']

    # take only the first 15 lines of the file to recognize the headline where the body area should be
    start_of_content = fixed_content[0:15]
    index = 0
    for line in start_of_content:
        index += 1
        # makes sure it's not part of another word
        if area + ' ' in line or ' ' + area in line:
            return index
    # if not found typ in the file, return infinity index because later we want the minimal index
    return float('inf')


def body_area(filename, poss_body_areas, imaging_type):
    """
    Finds and returns body area of the imaging document.
    Does it by finding the minimal index of a possible body area in the imaging document txt file.

    Parameters
    ----------
    filename : str
        A string representing the name of the txt file generated by OCR process on an imaging document
    poss_imaging_types : list
        A list of str representing a closed set of possible body areas
    imaging_type : str
        A string representing the imaging type of the document (supposed to be recognized by the imaging_type script)


    Returns
    -------
    str
        The most probably imaging type of the document

    """
    # PET CT is always whole body
    if imaging_type == "PET CT":
        return 'whole body'
    # initialize a list of infinity values, of the same length as the length of poss_body_areas
    # each value in the list will finally be the index of the line in the file, or infinity if not found
    line_list = [float('inf')] * len(poss_body_areas)
    index = -1
    for area in poss_body_areas:
        index += 1
        line_list[index] = body_area_line(filename, area)
    # return the body area with the minimal line index of a possible type, which is most probably the real body area
    return poss_body_areas[line_list.index(min(line_list))]


def specific_sites_pages(doc_pages, poss_sites, keys):
    """
    Extracts and returns the specific body sites from the imaging document txt file.
    Does it by iterating over the pages of the document and calling specific_sites function for each one of them., where
     each file represent a page.

    Parameters
    ----------
    doc_pages : list
        A list of strings where each str represents the name of the txt file page generated by OCR process on an
         imaging document
    poss_sites : list
        A list of str representing a closed set of possible body sites
    keys : list
        A list of str representing a closed set of key words that body sites will probably appear after them in the doc

    Returns
    -------
    list of str
        The most probably body sites in the document

    """
    sites = {}
    for page in doc_pages:
        sites.update(specific_sites(page, poss_sites, keys))
    # remove duplicates
    return sites


def specific_sites(doc, poss_sites, keys):
    """
    Extracts and returns the specific body sites from the imaging document page txt file.
    Does it by iterating over the lines in the file, finding one of the key words
     and the body parts should appear  after it.

    Parameters
    ----------
    doc : str
        A string representing the name of the txt file generated by OCR process on an imaging document page
    poss_sites : list
        A list of str representing a closed set of possible body sites
    keys : list
        A list of str representing a closed set of key words that body sites will probably appear after them in the doc

    Returns
    -------
    list of str
        The most probably body sites in the page

    """
    sites = []
    # pre-processing for converting the possible sites to lower letters
    poss_sites = [s.lower() for s in poss_sites]
    # open the sample text representing the imaging doc page
    doc = open(doc)

    # read the content of the file opened
    content = doc.readlines()

    # pre-processing for deleting empty lines generated by OCR, could be in another function
    fixed_content = [x.replace('\n', '') for x in content if x != '\n']

    index = 0
    for line in fixed_content:
        index += 1
        # if found key word
        if any(k in line for k in keys):
            break

    # slice the content to be the content after the key word - body parts should be there
    sites_content = fixed_content[index:]
    # pre-processing for converting the sites to lower letters, could be in another function
    sites_content = [s.lower() for s in sites_content]
    for site in poss_sites:
        for idx, line in enumerate(sites_content[:-1]):
            # if site + '/' in line or site + ':' in line or site + ' ' in line or site + ',' in line:
            if site + ':' in line:
                sites.append((idx, site))
                # sites.append(site)
            elif site + ':' in line+sites_content[idx+1]:
                sites.append((idx+1, site))
    sites = ([next(b) for a, b in itertools.groupby(sites, lambda y: y[1])]) # remove duplicates of sites
    return sites_summaries(sorted(sites), sites_content)

def sites_summaries(sites, sites_content):
    sites_dict = {}
    for i, site_tuple in enumerate(sites):
        site_line_idx = site_tuple[0]
        site = site_tuple[1]
        if i+1 != len(sites):
            next_site_line_idx = sites[i+1][0]
        else:
            next_site_line_idx = site_line_idx
        j = i + 1
        while site_line_idx == next_site_line_idx and j != len(sites):
            next_site_line_idx = sites[j][0]
            j += 1
        s = ''
        # for line in sites_content[idx:next_site_line_idx]:
        sites_dict[site] = s.join(sites_content[site_line_idx:next_site_line_idx])
    return sites_dict


# could be improve using dictionary with values as other ways to write
poss_imaging_types = ['XR', 'MRI', 'PET CT', 'CT', 'DOTATATE']
poss_body_areas = ['brain to thigh', 'brain to chest', 'chest and abdomen', 'abdomen and pelvis', 'brain', 'chest',
              'abdomen', 'bone', 'whole body']
sites_keys = ['FINDINGS', 'REPORT', 'IMPRESSION']
poss_sites = ['PERITONEUM/MESENTERY /BOWEL', 'Chest lymph nodes', 'KIDNEYS/URETERS/BLADDER', '􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇HEAD/FACE', '􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌􏰗􏰥􏰁􏰃􏰖􏰄􏰥􏰦􏰉􏰆􏰃􏰄􏰦􏰗􏰇􏰉􏰦􏰌ABDOMINOPELVIC NODES', 'BOWEL/PERITONEUM/MESENTERY',
              'BONES/SOFT TISSUES',
              'ADRENAL GLANDS', 'LUNGS/AIRWAYS', 'PLEURA/PERICARDIUM', 'MEDIASTINUM/THORACIC NODES', 'Adenopathy',
              'Lower Neck', 'Thyroid gland', 'Trachea', 'Supracalvicular',
              'Pulmonary Arteries', 'Pulmonary Parenchyma', 'Airways', 'Pleural Space', 'Heart', 'Aorta',
              'Pericardium', 'Mediastinum', 'Hila', 'Thoracic Vessels', 'Osseous Structures', 'Chest Wall',
              'Costosternal', 'Mammary node', 'Breast', 'retrocaval', 'Upper Abdomen', 'Right lobe',
              'Lung', 'Thyroid', 'Lungs', 'airway and pleura', 'Mediastinum and hila', 'Heart and great vessels',
              'Breast', 'Pericardial or pleural', 'Extra-axial spaces', 'Intracranial hemorrhage',
              'Ventircular system', 'Basal cisterns', 'Cerebral parenchyma', 'Midline shift', 'Cerebellum',
              'Brainstem', 'Calavarium', 'Vascular system', 'Paranalsal sinuses and mastoid air cells',
              'Visualized orbits', 'Visualized upper cervical spine', 'Sella', 'Skull base', 'Marrow',
              'Frontal', 'Hypermetabolic foci', 'Liver', 'Gallbladder', 'Bile ducts', 'Kidney', 'Adrenal',
              'Spleen', 'Pancreas', 'Great abdominal vessels', 'Stomach', 'Bowel', 'Appendix', 'Pelvis',
              'Mesentry/Peritoneum', 'Intestine', 'Vasulature', 'Bone windows', 'Gastrointestinal trac',
              'Groin', 'Colon', 'Lung bases', 'Retroperitoneum', 'Rectum', 'Spine', 'Bones and soft tissue',
              'Vertebrae', 'Skeleton', 'Head and neck', 'Abdomen and pelvis', 'Thorax', 'Musculoskeletal',
              'Thoracic inlet', 'Breast and axilla', 'Kidneys, ureters', 'Gastrointestinal tract', 'Mesentery',
              'Peritoneum', 'Retroperitoneum', 'Vasculature', 'Parenchyma', 'Volume', 'Calvarium', 'Extra-cranial',
              'Brain', 'HEPATOBILIARY', 'PELVIC ORGANS', 'NECK', 'CHEST', 'THORACIC NODES', '􏰅􏰆􏰀􏰉􏰁TUMOR BED􏰷',
              'TUMOR/POST-TREATMENT SEQUELAE CHARACTERISTICS', 'MESORECTAL FASCIA', 'LYMPH NODES', 'BONES']
# poss_sites = ['Spleen']
# poss_sites = ['bones/soft tissues']
# poss_sites = ['Musculoskeletal']

# area1 = body_area('doc1.txt', poss_body_areas, imaging_type('doc1.txt', poss_imaging_types))
# area2 = body_area('doc2.txt', poss_body_areas, imaging_type('doc2.txt', poss_imaging_types))
# area3 = body_area('doc3.txt', poss_body_areas, imaging_type('doc3.txt', poss_imaging_types))
# print(area1)
# print(area2)
# print(area3)

doc1_pages = ['doc1.txt']
doc2_pages = ['doc2.txt']
doc3_pages = ['doc3_1.txt', 'doc3_2.txt', 'doc3_3.txt']
sites1 = specific_sites_pages(doc1_pages, poss_sites, sites_keys)
# sites2 = specific_sites_pages(doc2_pages, poss_sites, sites_keys)
sites3 = specific_sites_pages(doc3_pages, poss_sites, sites_keys)
# print(sites1)
# print(sites2)
# print(sites3)
# print(sites1.keys())
print(sites3.keys())

# write_to_xlsx('ac example.xlsx', area1, 19, 19)
# write_to_xlsx('ac example.xlsx', area2, 20, 19)
# write_to_xlsx('ac example.xlsx', area3, 21, 19)
